const path = require('path');
const CopyWebpackPlugin = require('copy-webpack-plugin');
const defaultConfig = require('@wordpress/scripts/config/webpack.config');
const RemoveEmptyScriptsPlugin = require('webpack-remove-empty-scripts');

/**
 * create entries from assets.json
 *  assets.json works in tandem with enqueue-assets.php and webpack in order
 * to create a manifest of assets that can be enqueued in WordPress
 * and enable HMR in development.
 *
 * Please note that paths for assets must exclude the extension
 * i.e. 'js/editor' instead of 'js/editor.js'
 */
const assetsJson = require('./resources/assets/assets.json');
const assets = console.log('assetsJson', assetsJson.assets);
// get the theme path from the assets.json
const { themePath } = assetsJson.config;
// get the resources path (where your theme and assets are located)
const resourcesPath = './resources';
// create the entry points from the assets.json
const entry = Object.entries(assetsJson.assets).reduce((acc, entry) => {
  const [hook, assetsForHooks] = entry;
  assetsForHooks.forEach((script) => {
    const entryName = script.path;
    const entryPath = `${resourcesPath}${script.path}`;
    if (!entryName || !entryPath) return acc;
    acc[entryName] = entryPath;
  });
  return acc;
}, {});

/**
 * Entry points example:
 *
 * entry: {
 *  'js/editor': './resources/js/editor.js',
 *  'js/screen': './resources/js/screen.js',
 *  },
 */

console.log('entry', entry);
console.log('themePath', themePath);
console.log('path', path.resolve(path.resolve(__dirname) + '/public' + themePath));

module.exports = {
  // ...defaultConfig,
  ...{
    entry: {
      // ...defaultConfig.entry,
      ...entry,
    },
    output: {
      clean: false,
      path: path.resolve(path.resolve(__dirname) + '/public' + themePath),
      publicPath: `${themePath}/`,
    },

    plugins: [
      // Include WP's plugin config.
      ...defaultConfig.plugins,

      // Removes the empty `.js` files generated by webpack but
      // sets it after WP has generated its `*.asset.php` file.
      new RemoveEmptyScriptsPlugin({
        stage: RemoveEmptyScriptsPlugin.STAGE_AFTER_PROCESS_PLUGINS,
      }),
      new CopyWebpackPlugin({
        patterns: [
          {
            from: path.resolve(process.cwd(), 'resources'),
            to: path.resolve(path.resolve(__dirname) + '/public' + themePath),
            globOptions: {
              ignore: ['**/js/**', '**/scss/**', '**/node_modules/**'],
            },
          },
        ],
      }),
    ],
    module: {
      rules: [
        {
          test: /\.?js$/,
          exclude: /(node_modules)/,
          loader: 'babel-loader',
          options: {
            presets: [['@babel/preset-env'], ['@babel/preset-react']],
            plugins: [['@babel/plugin-transform-runtime', { regenerator: true }]],
          },
        },

        {
          test: /\.s?css$/i,
          use: ['style-loader', 'css-loader', 'postcss-loader', 'sass-loader'],
        },
      ],
    },
  },
};
